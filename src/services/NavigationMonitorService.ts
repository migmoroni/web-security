import { SecurityAnalyzer } from '@/analyzers';
import { DomainUtils } from '@/utils/DomainUtils';

/**
 * Servi√ßo para interceptar navega√ß√£o via background script
 * Este servi√ßo tem acesso √†s APIs webNavigation para interceptar
 * URLs digitadas na barra de endere√ßos
 */
export class NavigationMonitorService {
  private static blockedNavigations = new Set<string>();
  private static isInitialized = false;

  /**
   * Inicializa o servi√ßo de monitoramento
   */
  static initialize() {
    if (this.isInitialized) return;
    
    this.setupNavigationListener();
    this.setupTabUpdateListener();
    this.isInitialized = true;
    console.log('üõ°Ô∏è NavigationMonitorService inicializado');
  }

  /**
   * Configura listener para interceptar navega√ß√£o
   */
  private static setupNavigationListener() {
    if (!chrome.webNavigation?.onBeforeNavigate) {
      console.warn('webNavigation API n√£o dispon√≠vel');
      return;
    }

    chrome.webNavigation.onBeforeNavigate.addListener(
      async (details) => {
        // Apenas interceptar navega√ß√£o principal (n√£o frames)
        if (details.frameId !== 0) return;
        
        // Evitar loop infinito
        if (this.blockedNavigations.has(details.url)) return;
        
        try {
          const shouldBlock = await this.shouldBlockNavigation(details.url);
          
          if (shouldBlock) {
            console.log('üö´ Navega√ß√£o bloqueada:', details.url);
            this.blockedNavigations.add(details.url);
            
            // Redirecionar para p√°gina de bloqueio
            const blockedUrl = chrome.runtime.getURL('blocked.html') + 
              `?url=${encodeURIComponent(details.url)}&tabId=${details.tabId}`;
            
            chrome.tabs.update(details.tabId, { url: blockedUrl });
          }
        } catch (error) {
          console.error('Erro ao verificar navega√ß√£o:', error);
        }
      },
      { url: [{ schemes: ['http', 'https'] }] }
    );
  }

  /**
   * Configura listener para mudan√ßas em tabs
   */
  private static setupTabUpdateListener() {
    chrome.tabs.onUpdated.addListener(async (tabId, changeInfo, tab) => {
      if (changeInfo.url && tab.url) {
        // Verificar se √© uma URL digitada na barra de endere√ßos
        if (changeInfo.url !== tab.url) return;
        
        const shouldBlock = await this.shouldBlockNavigation(changeInfo.url);
        
        if (shouldBlock && !this.blockedNavigations.has(changeInfo.url)) {
          console.log('üö´ URL na barra de endere√ßos bloqueada:', changeInfo.url);
          this.blockedNavigations.add(changeInfo.url);
          
          const blockedUrl = chrome.runtime.getURL('blocked.html') + 
            `?url=${encodeURIComponent(changeInfo.url)}&tabId=${tabId}`;
          
          chrome.tabs.update(tabId, { url: blockedUrl });
        }
      }
    });
  }

  /**
   * Verifica se uma navega√ß√£o deve ser bloqueada
   */
  private static async shouldBlockNavigation(url: string): Promise<boolean> {
    try {
      // N√£o bloquear p√°ginas internas da extens√£o
      if (url.startsWith(chrome.runtime.getURL(''))) return false;
      
      // N√£o bloquear URLs de desenvolvimento local
      if (url.includes('localhost') || url.includes('127.0.0.1')) return false;
      
      // Verificar se √© um dom√≠nio conhecido como seguro
      const mainDomain = DomainUtils.extractMainDomain(url);
      if (DomainUtils.isKnownDomain(mainDomain)) return false;
      
      // Analisar URL
      const analysis = await SecurityAnalyzer.analyzeUrl(url);
      
      return analysis.isSuspicious;
    } catch (error) {
      console.error('Erro na an√°lise de navega√ß√£o:', error);
      return false; // Em caso de erro, n√£o bloquear
    }
  }

  /**
   * Permite uma URL espec√≠fica (quando usu√°rio escolhe prosseguir)
   */
  static allowNavigation(url: string, tabId: number) {
    this.blockedNavigations.delete(url);
    
    // Redirecionar para a URL original
    chrome.tabs.update(tabId, { url });
  }

  /**
   * Obt√©m estat√≠sticas de navega√ß√£o bloqueada
   */
  static getBlockedStats() {
    return {
      totalBlocked: this.blockedNavigations.size,
      blockedUrls: Array.from(this.blockedNavigations)
    };
  }

  /**
   * Limpa navega√ß√µes bloqueadas (manuten√ß√£o)
   */
  static cleanup() {
    this.blockedNavigations.clear();
  }

  /**
   * Remove URLs antigas da lista (chamado periodicamente)
   */
  static cleanupOldEntries() {
    // Por simplicidade, limpar tudo - em produ√ß√£o poderia ser mais inteligente
    if (this.blockedNavigations.size > 100) {
      this.blockedNavigations.clear();
    }
  }
}
